##
## @file defs.inl.in
## @brief Vulkan Dispatch Definitions Template
## @author Alexander Rothman <[gnomesort@megate.ch](mailto:gnomesort@megate.ch)>
## @date 2024
## @copyright AGPL-3.0-or-later
## @cond
<%!
  import sys
  from argparse import ArgumentParser
%>\
<%
  parser = ArgumentParser(prog="defs.inl.in", add_help=False, exit_on_error=False, prefix_chars="@")
  parser.add_argument("@help", "@h", action="help", help="Display this help message and exit.")
  parser.add_argument("@generate-defines", action="store_true", default=False,
                      help="When enabled, generate \"#define\"s for enabled Vulkan APIs and extensions. These are "
                           "always defined to 1.")
try:
    args = parser.parse_args(arguments)
  except Exception as err:
    print(err, file=sys.stderr)
    parser.print_help(file=sys.stderr)
    return STOP_RENDERING
%>\
/**
 * @file defs.inl
 * @brief Vulkan Dispatch Definitions Inline File
 * @author Generated
 * @date ${f"{buildtime:%B} {buildtime.day:02}, {buildtime.year}"}
 */
#ifndef MEGATECH_VULKAN_DISPATCH_DEFS_INL
#define MEGATECH_VULKAN_DISPATCH_DEFS_INL

#include <cstddef>

/**
 * @def MEGATECH_VULKAN_DISPATCH_BUILD_DATE
 * @brief The date on which this file was generated in the format YYYYMMDD.
 * @details All times are UTC.
 */
#define MEGATECH_VULKAN_DISPATCH_BUILD_DATE (${f"{buildtime.year}{buildtime.month:02}{buildtime.day:02}"}ULL)

  /**
 * @def MEGATECH_VULKAN_DISPATCH_BUILD_TIME
 * @brief The time at which this file was generated in the format HHMMSS.
 * @details All times are UTC.
 */
#define MEGATECH_VULKAN_DISPATCH_BUILD_TIME (${f"{buildtime.hour}{buildtime.minute:02}{buildtime.second:02}"}ULL)
% if args.generate_defines:
% for feature in specification.features().values():
% if feature.enabled():
/**
 * @def MEGATECH_VULKAN_API_${feature.name().replace("VK_", "").upper()}_ENABLED
 * @brief Indicates that "${feature.name()}" was enabled during generation.
 */
#define MEGATECH_VULKAN_API_${feature.name().replace("VK_", "").upper()}_ENABLED (1)
% endif
% endfor
% for extension in specification.extensions().values():
% if extension.enabled():
/**
 * @def MEGATECH_VULKAN_DISPATCH_${extension.name().replace("VK_", "").upper()}_ENABLED
 * @brief Indicates that "${extension.name()}" was enabled during generation.
 */
#define MEGATECH_VULKAN_DISPATCH_${extension.name().replace("VK_", "").upper()}_ENABLED (1)
% endif
% endfor
% endif

/**
 * @def MEGATECH_VULKAN_DISPATCH_DEFINE_HANDLE
 * @brief Define a dispatchable Vulkan handle type.
 * @details This is equivalent to the VK_DEFINE_HANDLE macro.
 * @param object The name of the object to define.
 */
#define MEGATECH_VULKAN_DISPATCH_DEFINE_HANDLE(object) ${"\\"}
  struct object##_T; ${"\\"}
  typedef object##_T* object

/// @cond
#if defined(_WIN32)
  #define MEGATECH_VULKAN_DISPATCH_API_ATTR_PRIV
  #define MEGATECH_VULKAN_DISPATCH_API_CALL_PRIV __stdcall
  #define MEGATECH_VULKAN_DISPATCH_API_PTR_PRIV MEGATECH_VULKAN_DISPATCH_API_CALL
#elif defined(__ANDROID__) && defined(__ARM_ARCH) && __ARM_ARCH < 7
  #error "Vulkan is not supported for the 'armeabi' NDK ABI"
#elif defined(__ANDROID__) && defined(__ARM_ARCH) && __ARM_ARCH >= 7 && defined(__ARM_32BIT_STATE)
  #define MEGATECH_VULKAN_DISPATCH_API_ATTR_PRIV __attribute__((pcs("aapcs-vfp")))
  #define MEGATECH_VULKAN_DISPATCH_API_CALL_PRIV
  #define MEGATECH_VULKAN_DISPATCH_API_PTR_PRIV MEGATECH_VULKAN_DISPATCH_API_ATTR
#else
  #define MEGATECH_VULKAN_DISPATCH_API_ATTR_PRIV
  #define MEGATECH_VULKAN_DISPATCH_API_CALL_PRIV
  #define MEGATECH_VULKAN_DISPATCH_API_PTR_PRIV
#endif
/// @endcond

/**
 * @def MEGATECH_VULKAN_DISPATCH_API_CALL
 * @brief The calling convention used for the Vulkan API.
 * @details This can be overridden at the client's choice. This **MUST** be equivalent to VKAPI_CALL.
 */
#ifndef MEGATECH_VULKAN_DISPATCH_API_CALL
  #define MEGATECH_VULKAN_DISPATCH_API_CALL MEGATECH_VULKAN_DISPATCH_API_CALL_PRIV
#endif

/**
 * @def MEGATECH_VULKAN_DISPATCH_API_ATTR
 * @brief The function attribute used for the Vulkan API.
 * @details This can be overridden at the client's choice. This **MUST** be equivalent to VKAPI_ATTR.
 */
#ifndef MEGATECH_VULKAN_DISPATCH_API_ATTR
  #define MEGATECH_VULKAN_DISPATCH_API_ATTR MEGATECH_VULKAN_DISPATCH_API_ATTR_PRIV
#endif

/**
 * @def MEGATECH_VULKAN_DISPATCH_API_PTR
 * @brief The function pointer attribute used for the Vulkan API.
 * @details This can be overridden at the client's choice. This **MUST** be equivalent to VKAPI_PTR.
 */
#ifndef MEGATECH_VULKAN_DISPATCH_API_PTR
  #define MEGATECH_VULKAN_DISPATCH_API_PTR MEGATECH_VULKAN_DISPATCH_API_PTR_PRIV
#endif

/// @cond
#define MEGATECH_VULKAN_DISPATCH_GLOBAL_COMMAND_LIST ${"\\"}
% for i, cmd in enumerate(sorted(commands.global_commands())):
  MEGATECH_VULKAN_DISPATCH_COMMAND(${cmd.name()}) ${"\\" if i < len(commands.global_commands()) - 1 else ""}
% endfor

#define MEGATECH_VULKAN_DISPATCH_GLOBAL_COMMAND_COUNT (${len(commands.global_commands())})

#define MEGATECH_VULKAN_DISPATCH_INSTANCE_COMMAND_LIST ${"\\"}
% for i, cmd in enumerate(sorted(commands.instance_commands())):
  MEGATECH_VULKAN_DISPATCH_COMMAND(${cmd.name()}) ${"\\" if i < len(commands.instance_commands()) - 1 else "" }
% endfor

#define MEGATECH_VULKAN_DISPATCH_INSTANCE_COMMAND_COUNT (${len(commands.instance_commands())})

#define MEGATECH_VULKAN_DISPATCH_DEVICE_COMMAND_LIST ${"\\"}
% for i, cmd in enumerate(sorted(commands.device_commands())):
  MEGATECH_VULKAN_DISPATCH_COMMAND(${cmd.name()}) ${"\\" if i < len(commands.device_commands()) - 1 else ""}
% endfor

#define MEGATECH_VULKAN_DISPATCH_DEVICE_COMMAND_COUNT (${len(commands.device_commands())})
/// @endcond

extern "C" {

/**
 * @typedef VkInstance
 * @brief A type equivalent to the VkInstance handle as defined by Vulkan.
 * @see https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkInstance.html
 */
MEGATECH_VULKAN_DISPATCH_DEFINE_HANDLE(VkInstance);

/**
 * @typedef VkDevice
 * @brief A type equivalent to the VkDevice handle as defined by Vulkan.
 * @see https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDevice.html
 */
MEGATECH_VULKAN_DISPATCH_DEFINE_HANDLE(VkDevice);

/**
 * @brief A generic Vulkan function pointer.
 * @details Values of this type **MUST** be reinterpreted to the correct function pointer type before being called.
 * @see https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/PFN_vkVoidFunction.html
 */
typedef void (MEGATECH_VULKAN_DISPATCH_API_PTR *PFN_vkVoidFunction)(void);

/**
 * @brief A pointer to a Vulkan instance-level loader function.
 * @see https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetInstanceProcAddr.html
 */
typedef PFN_vkVoidFunction (MEGATECH_VULKAN_DISPATCH_API_PTR *PFN_vkGetInstanceProcAddr)(VkInstance, const char*);

/**
 * @brief A pointer to a Vulkan device-level loader function.
 * @see https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGetDeviceProcAddr.html
 */
typedef PFN_vkVoidFunction (MEGATECH_VULKAN_DISPATCH_API_PTR *PFN_vkGetDeviceProcAddr)(VkDevice, const char*);

}

namespace megatech::vulkan::dispatch {

  /**
   * @brief Retrieve the version of the Vulkan specification that was used to generate this library.
   * @details In general, this **SHOULD** be less than or equal to the patch version of the value returned by
   *          `vkEnumerateInstanceVersion()`.
   * @return An unsigned integer indicating the version of the Vulkan specification.
   */
  constexpr std::size_t specification_version() {
    return ${specification.specification_version()};
  }

}

#endif
## @endcond
